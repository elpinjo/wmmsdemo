<?xml version="1.0"?>

<project default="prep" basedir=".">
  <property environment="env"/>
  
  <property name="WORKSPACE" value="${env.WORKSPACE}"/>
  <property name="DEPLOYMENT_NAME" value="MSR_PACKAGES"/>
  <property name="PACKAGE" value="${env.PACKAGE}"/>
  <property name="CONTAINER" value="${env.CONTAINER}"/>
  <property name="NAMESPACE" value="${env.NAMESPACE}"/>
  <property name="CONTAINER_TAG" value="${env.CONTAINER_TAG}"/>
  <property name="dist" value= "./dist" />
  <property name="build" value= "./build" />
  
  
  <macrodef name="populate-from-template">
        <attribute name="template"/>
        <attribute name="target"/>
        <attribute name="ifremaining" default="wxant.unsubstituted.exists" />
        <sequential>
			<local name="temp.file" />
			<tempfile property="temp.file" deleteonexit="true"/>
			<echoproperties destfile="${temp.file}" />
            <local name="unsubstituted.exists"/>
            <copy file="@{template}" 
                  tofile="@{target}" 
                  overwrite="true"
                  verbose="false">
                <filterset begintoken="${" endtoken="}" filtersfile="${temp.file}"/>
            </copy>
            <loadfile property="unsubstituted.exists" srcfile="@{target}">        
                <filterchain>         
                    <linecontainsregexp>            
                        <regexp pattern="$\{.+\}"/>
                    </linecontainsregexp>        
                </filterchain>     
            </loadfile>      
            <!-- <fail if="unsubstituted.exists">Found unsubstituted variable(s): ${unsubstituted.exists}</fail> -->
        </sequential>
  </macrodef>	
  
  
  <target name="mkdirs">
  
	<mkdir dir="${build}"/>
	<mkdir dir="${build}/repo"/>
	<mkdir dir="${build}/container"/>
	<mkdir dir="${build}/container/config"/>
	<mkdir dir="${dist}"/>
  </target>
  
  <target name="prep" depends="mkdirs">
    <populate-from-template template="project.xml" target="${build}/project-deploy.xml"/>
	<populate-from-template template="Dockerfile" target="${build}/container/Dockerfile"/>
	<populate-from-template template="deployment/api-DC.yml" target="deployment/${env.CONTAINER}-DC.yml"/>
	<populate-from-template template="deployment/service-route.yml" target="deployment/${env.CONTAINER}-service-route.yml"/>
	<copy todir="${build}/container/config" failonerror="false">
		<fileset dir="./config"/>
	</copy>
  </target>
</project>
